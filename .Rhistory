row <- function(x){
a = c()
for (i in 1:x){
append(a, factorial(i))
}
return(a[0])
}
a = row(10)
a
factorial <- function(x){
if (x==1){
return (1)
}
else{
return (x*factorial(x-1))
}
}
row <- function(x){
a = c()
for (i in 1:x){
append(a, factorial(i))
}
return(a[0])
}
a = row(10)
as
factorial <- function(x){
if (x==1){
return (1)
}
else{
return (x*factorial(x-1))
}
}
row <- function(x){
a = c()
for (i in 1:x){
append(a, factorial(i))
}
return(a[0])
}
a = row(10)
a
factorial <- function(x){
if (x==1){
return (1)
}
else{
return (x*factorial(x-1))
}
}
row <- function(x){
a = c()
for (i in 1:x){
append(a, factorial(i))
}
return(a)
}
a = row(10)
a
factorial <- function(x){
if (x==1){
return (1)
}
else{
return (x*factorial(x-1))
}
}
row <- function(x){
a = seq(1,10)
for (i in 1:x){
a[i]= factorial(i)
}
return(a)
}
a = row(10)
a
set.seed(100)
dat <- round(rnorm(5, mean=60, sd=10),1)
dat
set.seed(100)
dat <- round(rchisq(100,10))
hist(dat)
x <- seq(min(dat), max(dat), by = 0.1)
y <- dchisq(x)
lines(x,y)
set.seed(100)
dat <- round(rchisq(100,10))
hist(dat)
x <- seq(min(dat), max(dat), by = 0.1)
y <- dchisq(x,10)
lines(x,y)
set.seed(100)
dat <- round(rchisq(100,10))
hist(dat)
x <- seq(min(dat), max(dat), by = 0.1)
y <- dchisq(x,10)
lines(x,y)
set.seed(100)
x <- (rchisq(100,10))
h<-hist(dat, freq=FALSE)
xfit <- seq(min(x), max(x), length = 40)
y <- dchisq(xfit,10)
lines(x,y)
set.seed(100)
x <- (rchisq(100,10))
h<-hist(dat, freq=FALSE)
xfit <- seq(min(x), max(x), length = 40)
xfit$length
y <- dchisq(xfit,10)
lines(x,y)
set.seed(100)
x <- (rchisq(100,10))
h<-hist(dat, freq=FALSE)
xfit <- seq(min(x), max(x), length = 40)
y <- dchisq(xfit,10)
lines(xfit,y)
set.seed(100)
x <- (rchisq(100,10))
h<-hist(dat)
xfit <- seq(min(x), max(x), length = 40)
y <- dchisq(xfit,10)*diff(h$mids[1:2])*length(x)
lines(xfit,y)
pnorm(0)-pnorm(-20)
pnorm(0)-pnorm(-2)
set.seed(100)
N = 1000
x = rnorm(1000)
y = qnorm((1:N/1000))
plot(sort(x),y)
set.seed(100)
N = 1000
x = rnorm(1000)
y = qt((1:N/1000),2)
plot(y,sort(x)
set.seed(100)
N = 1000
x = rnorm(1000)
y = qt((1:N/1000),2)
plot(y,sort(x))
set.seed(100)
N = 1000
x = rnorm(1000)
y = qt((1:N/1000),10)
plot(y,sort(x))
set.seed(100)
N = 1000
x = rt(1000)
y = qnorm((1:N/1000),10)
plot(y,sort(x))
set.seed(100)
N = 1000
x = rt(1000,2)
y = qnorm((1:N/1000),10)
plot(y,sort(x))
set.seed(100)
N = 1000
x = rt(1000,2)
y = qnorm((1:N/1001),10)
plot(y,sort(x))
pt(100,-2)
pt(100,-2)
pt(10,-2)
pt(-2,10)
pt(-2,10)
pt(-2,100)
qt(0.025,100)
class(c(1,5,3,2,4))
class(c(1,5,3,2,4))
class(c(1,5,3,2,4,"fac"))
class(c(1,5,3,2,TRUE,"fac"))
class(c(1,5,3,2,TRUE,"fac", 3))
class(c(1,5,3,2,TRUE,"fac", 3, TRUE))
install.packages("ggplot2")
set.seed(1000)
x = 1:100; y=1+0.75*x+rnorm(100,0,1) # generate x and y
plot(x,y)par(mfrow=c(2,2))
plot(lm(y~x))
plot(lm(y~x))
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
library(ggplot2)
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
library(ggplot2)
MINIMUM = 10
nba_stats <- read.csv("regular_season_stats.csv")
college_stats <- read.csv("college_stats.csv")
merged_stats <- merge(nba_stats, college_stats, by = "PLAYER_ID") #.x is nba, .y is college
merged_stats$ts.x<-(merged_stats$PTS.x)*(merged_stats$GP.x)/
2/(merged_stats$FGA.x*merged_stats$GP.x+(0.44)*(merged_stats$FTA.x*merged_stats$GP.x))
merged_stats$ts.y<-(merged_stats$PTS.y)*(merged_stats$GP.y)/
2/(merged_stats$FGA.y*merged_stats$GP.y+(0.44)*(merged_stats$FTA.y*merged_stats$GP.y))
merged_stats_college <- subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA3.y*GP.y>MINIMUM))
merged_stats_min = subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA.x*GP.x>MINIMUM)&(FTA.x*GP.x>MINIMUM))
merged_stats_3s = subset(merged_stats, (FG3A.x*GP.x>MINIMUM))
c_shooting_splits <- merged_stats[,c("FT_PCT.y","FG_PCT.y","FG3_PCT.y")]
#get college shooting splits, indiv columns, etc.
hist(merged_stats_3s$ts.y, breaks="FD")
hist(merged_stats_3s$FG_PCT.y, breaks="FD")
hist(merged_stats_3s$FG3_PCT.y, breaks="FD")
hist(merged_stats_3s$FT_PCT.y, breaks="FD")
hist(merged_stats_3s$ts.x, breaks="FD")
hist(merged_stats_3s$FG_PCT.x, breaks="FD")
hist(merged_stats_3s$FG3_PCT.x, breaks="FD")
hist(merged_stats_3s$FT_PCT.x, breaks="FD")
#ggpairs(c_shooting_splits, colour="gray20")
# comment on normality and shape of distributions
# make a dataframe with college shooting splits against nba shooting splits.
# filter by like 3 fga on all shooting
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
# imports
library(ggplot2)
MINIMUM = 10
nba_stats <- read.csv("regular_season_stats.csv")
college_stats <- read.csv("college_stats.csv")
merged_stats <- merge(nba_stats, college_stats, by = "PLAYER_ID") #.x is nba, .y is college
merged_stats$ts.x<-(merged_stats$PTS.x)*(merged_stats$GP.x)/
2/(merged_stats$FGA.x*merged_stats$GP.x+(0.44)*(merged_stats$FTA.x*merged_stats$GP.x))
merged_stats$ts.y<-(merged_stats$PTS.y)*(merged_stats$GP.y)/
2/(merged_stats$FGA.y*merged_stats$GP.y+(0.44)*(merged_stats$FTA.y*merged_stats$GP.y))
merged_stats_college <- subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA3.y*GP.y>MINIMUM))
merged_stats_min = subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA.x*GP.x>MINIMUM)&(FTA.x*GP.x>MINIMUM))
merged_stats_3s = subset(merged_stats, (FG3A.x*GP.x>MINIMUM))
c_shooting_splits <- merged_stats[,c("FT_PCT.y","FG_PCT.y","FG3_PCT.y")]
setwd("D:/Documents/Github/ncaa_nba_stats")
# imports
library(ggplot2)
MINIMUM = 10
nba_stats <- read.csv("regular_season_stats.csv")
college_stats <- read.csv("college_stats.csv")
merged_stats <- merge(nba_stats, college_stats, by = "PLAYER_ID") #.x is nba, .y is college
merged_stats$ts.x<-(merged_stats$PTS.x)*(merged_stats$GP.x)/
2/(merged_stats$FGA.x*merged_stats$GP.x+(0.44)*(merged_stats$FTA.x*merged_stats$GP.x))
merged_stats$ts.y<-(merged_stats$PTS.y)*(merged_stats$GP.y)/
2/(merged_stats$FGA.y*merged_stats$GP.y+(0.44)*(merged_stats$FTA.y*merged_stats$GP.y))
merged_stats_college <- subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA3.y*GP.y>MINIMUM))
merged_stats_min = subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA.x*GP.x>MINIMUM)&(FTA.x*GP.x>MINIMUM))
merged_stats_3s = subset(merged_stats, (FG3A.x*GP.x>MINIMUM))
c_shooting_splits <- merged_stats[,c("FT_PCT.y","FG_PCT.y","FG3_PCT.y")]
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
par(mfrow=c(2,2))
plot(lm(y~x))
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
qplot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
par(mfrow=c(2,2))
plot(lm(y~x))
# imports
library(ggplot2)
MINIMUM = 10
nba_stats <- read.csv("regular_season_stats.csv")
college_stats <- read.csv("college_stats.csv")
merged_stats <- merge(nba_stats, college_stats, by = "PLAYER_ID") #.x is nba, .y is college
merged_stats$ts.x<-(merged_stats$PTS.x)*(merged_stats$GP.x)/
2/(merged_stats$FGA.x*merged_stats$GP.x+(0.44)*(merged_stats$FTA.x*merged_stats$GP.x))
merged_stats$ts.y<-(merged_stats$PTS.y)*(merged_stats$GP.y)/
2/(merged_stats$FGA.y*merged_stats$GP.y+(0.44)*(merged_stats$FTA.y*merged_stats$GP.y))
merged_stats_college <- subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA3.y*GP.y>MINIMUM))
merged_stats_min = subset(merged_stats, (FGA.y*GP.y>MINIMUM)&(FTA.y*GP.y>MINIMUM)&(FGA.x*GP.x>MINIMUM)&(FTA.x*GP.x>MINIMUM))
merged_stats_3s = subset(merged_stats, (FG3A.x*GP.x>MINIMUM))
c_shooting_splits <- merged_stats[,c("FT_PCT.y","FG_PCT.y","FG3_PCT.y")]
#get college shooting splits, indiv columns, etc.
hist(merged_stats_3s$ts.y, breaks="FD")
hist(merged_stats_3s$FG_PCT.y, breaks="FD")
hist(merged_stats_3s$FG3_PCT.y, breaks="FD")
hist(merged_stats_3s$FT_PCT.y, breaks="FD")
hist(merged_stats_3s$ts.x, breaks="FD")
hist(merged_stats_3s$FG_PCT.x, breaks="FD")
hist(merged_stats_3s$FG3_PCT.x, breaks="FD")
hist(merged_stats_3s$FT_PCT.x, breaks="FD")
#ggpairs(c_shooting_splits, colour="gray20")
# comment on normality and shape of distributions
# make a dataframe with college shooting splits against nba shooting splits.
# filter by like 3 fga on all shooting
# FT PCT vs True Shooting NBA
x<-merged_stats_3s[,c("ft.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
plot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
par(mfrow=c(2,2))
plot(lm(y~x))
x<-merged_stats_3s[,c("FT_PCT.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
x<-merged_stats_3s[,c("FT_PCT.y")];
y<-merged_stats_3s[,c("ts.x")]
n <- length(x);
mx <- mean(x); my <- mean(y)
Sxx <- sum((x-mx)^2); Sxy <- sum((x-mx)*(y-my))
b1 <- Sxy/Sxx; b0 <- mean(y) - b1*mean(x)
yhat <- b0 + b1*x
RSS <- sum((y-yhat)^2)
S <- sqrt(RSS/(n-2))
xstar <- seq(min(x)-1,max(x)+1,.1)
ystar <- b0+b1*xstar
ci <- qt(.975,n-2)*S*sqrt(1/n+(xstar-mx)^2/Sxx)
ciLower <- ystar-ci; ciHigher <- ystar+ci
plot(x,y,xlim=c(min(x),max(x)),
ylim=c(min(y),max(y)))
pi <- qt(.975,n-2)*S*sqrt(1+1/n+(xstar-mx)^2/Sxx)
piLower <- ystar-pi; piHigher <- ystar+pi
lines(xstar,ystar,type="l",col="black")
lines(xstar,ciLower,type="l",col="red")
lines(xstar,ciHigher,type="l",col="red")
lines(xstar,piLower,type="l",col="green")
lines(xstar,piHigher,type="l",col="green")
seB0 <- S*sqrt(1/n+mx^2/Sxx)
seB1 <- S/sqrt(Sxx)
t0 <- b0/seB0
t1 <- b1/seB1
pval0 <- 2*pt(-abs(t0),n-2)
pval1 <- 2*pt(-abs(t1),n-2)
print(c(b0,b1,pval0,pval1))
myFit <- lm(y~x)
summary(myFit)
par(mfrow=c(2,2))
plot(lm(y~x))
